// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Subscription_Monitoring_System_Data;

#nullable disable

namespace Subscription_Monitoring_System.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230504041647_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HR DEPARTMENT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ACCOUNTING DEPARTMENT"
                        });
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "DAILY"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WEEKLY"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MONTHLY"
                        },
                        new
                        {
                            Id = 4,
                            Name = "YEARLY"
                        });
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubscriptionHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SubscriptionHistoryId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.SubscriptionClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionClients");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.SubscriptionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("SubscriptionUsers");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ResetPasswordExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessToken = "",
                            Code = "ADMIN",
                            DepartmentId = 1,
                            EmailAddress = "",
                            FirstName = "",
                            IsActive = true,
                            LastName = "",
                            MiddleName = "",
                            Password = "bCOBNrfxP+HFbIuG3fxmDmw2ZRVT96IWVkn0+DNAsjU=",
                            ProfilePictureImageName = "default_image.jpg",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordExpiry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetPasswordToken = ""
                        });
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Notification", b =>
                {
                    b.HasOne("Subscription_Monitoring_System_Data.Models.Subscription", "Subscription")
                        .WithMany("Notifications")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Service", b =>
                {
                    b.HasOne("Subscription_Monitoring_System_Data.Models.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Subscription", b =>
                {
                    b.HasOne("Subscription_Monitoring_System_Data.Models.Client", "Client")
                        .WithMany("InvolvedSubscriptions")
                        .HasForeignKey("ClientId");

                    b.HasOne("Subscription_Monitoring_System_Data.Models.User", "CreatedBy")
                        .WithMany("CreatedSubscriptions")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Subscription_Monitoring_System_Data.Models.Service", "Service")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscription_Monitoring_System_Data.Models.Subscription", "SubscriptionHistory")
                        .WithMany("SubscriptionHistories")
                        .HasForeignKey("SubscriptionHistoryId");

                    b.HasOne("Subscription_Monitoring_System_Data.Models.User", "UpdatedBy")
                        .WithMany("UpdatedSubscriptions")
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Client");

                    b.Navigation("CreatedBy");

                    b.Navigation("Service");

                    b.Navigation("SubscriptionHistory");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.SubscriptionClient", b =>
                {
                    b.HasOne("Subscription_Monitoring_System_Data.Models.Client", "Client")
                        .WithMany("SubscriptionClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscription_Monitoring_System_Data.Models.Subscription", "Subscription")
                        .WithMany("SubscriptionClients")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.SubscriptionUser", b =>
                {
                    b.HasOne("Subscription_Monitoring_System_Data.Models.Subscription", "Subscription")
                        .WithMany("SubscriptionUsers")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscription_Monitoring_System_Data.Models.User", "User")
                        .WithMany("SubscriptionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.User", b =>
                {
                    b.HasOne("Subscription_Monitoring_System_Data.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.UserNotification", b =>
                {
                    b.HasOne("Subscription_Monitoring_System_Data.Models.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscription_Monitoring_System_Data.Models.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Client", b =>
                {
                    b.Navigation("InvolvedSubscriptions");

                    b.Navigation("SubscriptionClients");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Service", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.Subscription", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("SubscriptionClients");

                    b.Navigation("SubscriptionHistories");

                    b.Navigation("SubscriptionUsers");
                });

            modelBuilder.Entity("Subscription_Monitoring_System_Data.Models.User", b =>
                {
                    b.Navigation("CreatedSubscriptions");

                    b.Navigation("SubscriptionUsers");

                    b.Navigation("UpdatedSubscriptions");

                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
